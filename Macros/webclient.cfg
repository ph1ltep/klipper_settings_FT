[pause_resume]

[display_status]

[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

[gcode_shell_command plot_graph]
command: sh /home/pi/klipper_config/script/plot_graph.sh
timeout: 30.0
verbose: True

[gcode_shell_command git_backup]
command: sh /usr/bin/klipper_git_backup.sh
timeout: 30.0
verbose: True

[gcode_shell_command display_off]
command: vcgencmd display_power 0
timeout: 5.0
verbose: True

[gcode_shell_command display_on]
command: vcgencmd display_power 1
timeout: 5.0
verbose: True

[gcode_shell_command probe_test_corners]
command: python3 ~/probe_accuracy_tests/probe_accuracy_test_suite.py --corner 30 --force_dock
timeout: 30.
verbose: True

#####################################################################
#  Macros .
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_execute: False
gcode:
  {% set user       = printer['gcode_macro _USER_VARIABLE'] %}
  {% set filter_off = user.peripheral.filter.run_after_print %}
  {% set vent_on    = user.peripheral.vent.on_val %}
  {% set vent_off   = user.peripheral.vent.run_after_print %}
  {% set retract    = user.filament.retract.end if not printer.pause_resume.is_paused 
                 else user.filament.retract.cancel %}
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=True
  M117 Cancel
  CANCEL_PRINT_BASE
  {% if printer['gcode_macro PRINT_START'].state == 'Prepare' %}
    {% if not printer.extruder.can_extrude %}
      {action_respond_info("Extruder Temp to low heat to %3.1fC" % printer.configfile.settings.extruder.min_extrude_temp)}
      M109 S{printer.configfile.settings.extruder.min_extrude_temp}
    {% endif %}
    M83
    G1 E-{retract} F{user.speed.retract}
  {% endif %}
  TURN_OFF_HEATERS
  {% if params.PARK|default(0)|int == 1 or (not printer.pause_resume.is_paused and user.park.park_at_cancel) %}
    _TOOLHEAD_PARK P={params.PARK|default(0)} X={user.park.pause.x} Y={user.park.pause.y}
  {% endif %}
  M107                                                     ; turn off fan
  {% if user.hw.chamber.fan %} M141 S{vent_on} {% endif %} ; vent chamber (setting fan to below ambient)
  _ADD_PRINT_TIME
  {% if params.ERROR|default(0)|int == 1 %}
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED BLINK=0.2 {% endif %}
    _SD_PRINT_STATS R='abort'
  {% else %}
   {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE {% endif %}
    _SD_PRINT_STATS R='canceled'
  {% endif %}
  _SD_PRINTER_STATS
  {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}
  {% if user.hw.chamber.fan %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if user.hw.filter.ena %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if user.unload_sd %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

#[gcode_macro PAUSE]
#description: Pause the actual running print
#rename_existing: PAUSE_BASE
#variable_restore: {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500}
#gcode:
#  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
#  ##### store coordinates to restore them at resume #####
#  {% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
#                                 'extrude'    : printer.gcode_move.absolute_extrude},
#                    'speed'   : printer.gcode_move.speed} %}
#  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore VALUE="{restore}"
#  {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE BLINK=1 {% endif %}
#  {% if not printer.extruder.can_extrude %}
#    {action_respond_info("Extruder Temp to low heat to %3.1fC" % printer.configfile.settings.extruder.min_extrude_temp)}
#    M109 S{printer.configfile.settings.extruder.min_extrude_temp}
#  {% endif %}
#  M83
#  G0 E-{user.filament.retract.pause} F{user.speed.retract}
#  PAUSE_BASE
#  _TOOLHEAD_PARK P=0 X={params.X|default(user.park.pause.x)} Y={params.Y|default(user.park.pause.y)}
#  M104 S{printer.extruder.target}

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
  # Parameters
  {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  
  {% if printer['pause_resume'].is_paused|int == 0 %}     
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={user.park.pause.dz}             ; set z hop variable for reference in resume macro [changed to use dz]
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                              
      #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
      SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
      PAUSE_BASE                                                                      ; pause print
      #{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
      #    G91                                                                              ; relative positioning
      #    G1 Z{z} F900                                                                     ; raise Z up by z hop amount
      #{% else %}
      #    { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
      #    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
      #{% endif %}
      #G90                                                                                  ; absolute positioning
      #G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
      _TOOLHEAD_PARK P=0 X={params.X|default(user.park.pause.x)} Y={params.Y|default(user.park.pause.y)}

      SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
      M104 S0                                                                              ; turn off hotend
      SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
  {% endif %}




[gcode_macro _TOOLHEAD_PARK]
description: Helper: Park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set pos = {'x': user.park.bed.x if params.P|int == 1 
                else params.X,
                'y': user.park.bed.y if params.P|int == 1 
                else params.Y,
                'z': user.park.bed.z if params.P|int == 1 
                else [(printer.toolhead.position.z + user.park.pause.dz), printer.toolhead.axis_maximum.z]|min} %}
  G90
  G0 Z{pos.z} F{user.speed.z_hop}
  G0 X{pos.x} Y{pos.y} F{user.speed.travel}

#[gcode_macro _RESUME_bak]
#description: Resume the actual running print
#rename_existing: RESUME_BASE
#gcode:
#  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
#  {% set restore  = printer["gcode_macro PAUSE"].restore %}
#  {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED {% endif %}
#  RESUME_BASE VELOCITY={params.VELOCITY|default(user.speed.travel/60)}  
#  G0 E{user.filament.retract.pause} F{user.speed.retract}
#  G0 F{restore.speed}
#  {% if restore.absolute.extrude %}         M82 {% endif %} ; set back to absolute
#  {% if not restore.absolute.coordinates %} G91 {% endif %} ; set back to relative


[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        RESUME_BASE                                                               ; resume print
    {% endif %}